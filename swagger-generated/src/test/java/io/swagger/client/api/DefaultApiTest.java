/*
 * API
 * ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import org.threeten.bp.LocalDate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Delete Session
     *
     * If you would like to delete (or \&quot;logout\&quot;) from a session, call this method with a valid session ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dELETEAuthenticationSessionTest() throws ApiException {
        Object body = null;
        Object response = api.dELETEAuthenticationSession(body);

        // TODO: test validations
    }
    /**
     * Delete List
     *
     * Delete a list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dELETEListListIdTest() throws ApiException {
        String listId = null;
        String sessionId = null;
        Object response = api.dELETEListListId(listId, sessionId);

        // TODO: test validations
    }
    /**
     * Delete Rating
     *
     * Remove your rating for a movie.  A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dELETEMovieMovieIdRatingTest() throws ApiException {
        Integer movieId = null;
        String contentType = null;
        String guestSessionId = null;
        String sessionId = null;
        Object response = api.dELETEMovieMovieIdRating(movieId, contentType, guestSessionId, sessionId);

        // TODO: test validations
    }
    /**
     * Delete Rating
     *
     * Remove your rating for a TV show.  A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dELETETvTvIdRatingTest() throws ApiException {
        Integer tvId = null;
        String contentType = null;
        String guestSessionId = null;
        String sessionId = null;
        Object response = api.dELETETvTvIdRating(tvId, contentType, guestSessionId, sessionId);

        // TODO: test validations
    }
    /**
     * Delete Rating
     *
     * Remove your rating for a TV episode.  A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Integer episodeNumber = null;
        String contentType = null;
        String guestSessionId = null;
        String sessionId = null;
        Object response = api.dELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating(tvId, seasonNumber, episodeNumber, contentType, guestSessionId, sessionId);

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get your account details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAccountTest() throws ApiException {
        String sessionId = null;
        Object response = api.gETAccount(sessionId);

        // TODO: test validations
    }
    /**
     * Get Favorite Movies
     *
     * Get the list of your favorite movies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAccountAccountIdFavoriteMoviesTest() throws ApiException {
        Integer accountId = null;
        String sessionId = null;
        Object response = api.gETAccountAccountIdFavoriteMovies(accountId, sessionId);

        // TODO: test validations
    }
    /**
     * Get Favorite TV Shows
     *
     * Get the list of your favorite TV shows.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAccountAccountIdFavoriteTvTest() throws ApiException {
        Integer accountId = null;
        String sessionId = null;
        Object response = api.gETAccountAccountIdFavoriteTv(accountId, sessionId);

        // TODO: test validations
    }
    /**
     * Get Created Lists
     *
     * Get all of the lists created by an account. Will invlude private lists if you are the owner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAccountAccountIdListsTest() throws ApiException {
        Integer accountId = null;
        String sessionId = null;
        String apiKey = null;
        Object response = api.gETAccountAccountIdLists(accountId, sessionId, apiKey);

        // TODO: test validations
    }
    /**
     * Get Rated Movies
     *
     * Get a list of all the movies you have rated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAccountAccountIdRatedMoviesTest() throws ApiException {
        Integer accountId = null;
        String sessionId = null;
        Object response = api.gETAccountAccountIdRatedMovies(accountId, sessionId);

        // TODO: test validations
    }
    /**
     * Get Rated TV Shows
     *
     * Get a list of all the TV shows you have rated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAccountAccountIdRatedTvTest() throws ApiException {
        Integer accountId = null;
        String sessionId = null;
        Object response = api.gETAccountAccountIdRatedTv(accountId, sessionId);

        // TODO: test validations
    }
    /**
     * Get Rated TV Episodes
     *
     * Get a list of all the TV episodes you have rated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAccountAccountIdRatedTvEpisodesTest() throws ApiException {
        String accountId = null;
        String sessionId = null;
        Object response = api.gETAccountAccountIdRatedTvEpisodes(accountId, sessionId);

        // TODO: test validations
    }
    /**
     * Get Movie Watchlist
     *
     * Get a list of all the movies you have added to your watchlist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAccountAccountIdWatchlistMoviesTest() throws ApiException {
        Integer accountId = null;
        String sessionId = null;
        Object response = api.gETAccountAccountIdWatchlistMovies(accountId, sessionId);

        // TODO: test validations
    }
    /**
     * Get TV Show Watchlist
     *
     * Get a list of all the TV shows you have added to your watchlist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAccountAccountIdWatchlistTvTest() throws ApiException {
        Integer accountId = null;
        String sessionId = null;
        Object response = api.gETAccountAccountIdWatchlistTv(accountId, sessionId);

        // TODO: test validations
    }
    /**
     * Create Guest Session
     *
     * This method will let you create a new guest session. Guest sessions are a type of session that will let a user rate movies and TV shows but not require them to have a TMDb user account. More information about user authentication can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).  Please note, you should only generate a single guest session per user (or device) as you will be able to attach the ratings to a TMDb user account in the future. There is also IP limits in place so you should always make sure it&#x27;s the end user doing the guest session actions.  If a guest session is not used for the first time within 24 hours, it will be automatically deleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAuthenticationGuestSessionNewTest() throws ApiException {
        Object response = api.gETAuthenticationGuestSessionNew();

        // TODO: test validations
    }
    /**
     * Create Request Token
     *
     * Create a temporary request token that can be used to validate a TMDb user login. More details about how this works can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETAuthenticationTokenNewTest() throws ApiException {
        Object response = api.gETAuthenticationTokenNew();

        // TODO: test validations
    }
    /**
     * Get Movie Certifications
     *
     * Get an up to date list of the officially supported movie certifications on TMDb.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCertificationMovieListTest() throws ApiException {
        Object response = api.gETCertificationMovieList();

        // TODO: test validations
    }
    /**
     * Get TV Certifications
     *
     * Get an up to date list of the officially supported TV show certifications on TMDb.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCertificationTvListTest() throws ApiException {
        Object response = api.gETCertificationTvList();

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get collection details by id.  #### Recent Changes  | **Date** | **Change** | | - | - | | March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCollectionCollectionIdTest() throws ApiException {
        Integer collectionId = null;
        Object response = api.gETCollectionCollectionId(collectionId);

        // TODO: test validations
    }
    /**
     * Get Images
     *
     * Get the images for a collection by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCollectionCollectionIdImagesTest() throws ApiException {
        Integer collectionId = null;
        Object response = api.gETCollectionCollectionIdImages(collectionId);

        // TODO: test validations
    }
    /**
     * Get Translations
     *
     * Get the list translations for a collection by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCollectionCollectionIdTranslationsTest() throws ApiException {
        Integer collectionId = null;
        Object response = api.gETCollectionCollectionIdTranslations(collectionId);

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get a companies details by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCompanyCompanyIdTest() throws ApiException {
        Integer companyId = null;
        Object response = api.gETCompanyCompanyId(companyId);

        // TODO: test validations
    }
    /**
     * Get Alternative Names
     *
     * Get the alternative names of a company.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCompanyCompanyIdAlternativeNamesTest() throws ApiException {
        Integer companyId = null;
        Object response = api.gETCompanyCompanyIdAlternativeNames(companyId);

        // TODO: test validations
    }
    /**
     * Get Images
     *
     * Get a companies logos by id.  There are two image formats that are supported for companies, PNG&#x27;s and SVG&#x27;s. You can see which type the original file is by looking at the &#x60;file_type&#x60; field. We prefer SVG&#x27;s as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.  For more information about how SVG&#x27;s and PNG&#x27;s can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCompanyCompanyIdImagesTest() throws ApiException {
        Integer companyId = null;
        Object response = api.gETCompanyCompanyIdImages(companyId);

        // TODO: test validations
    }
    /**
     * Get API Configuration
     *
     * Get the system wide configuration information. Some elements of the API require some knowledge of this configuration data. The purpose of this is to try and keep the actual API responses as light as possible. It is recommended you cache this data within your application and check for updates every few days.  This method currently holds the data relevant to building image URLs as well as the change key map.  To build an image URL, you will need 3 pieces of data. The &#x60;base_url&#x60;, &#x60;size&#x60; and &#x60;file_path&#x60;. Simply combine them all and you will have a fully qualified URL. Here’s an example URL:      https://image.tmdb.org/t/p/w500/8uO0gUM8aNqYLs1OsTBQiXu0fEv.jpg  The configuration method also contains the list of change keys which can be useful if you are building an app that consumes data from the change feed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETConfigurationTest() throws ApiException {
        String apiKey = null;
        Object response = api.gETConfiguration(apiKey);

        // TODO: test validations
    }
    /**
     * Get Countries
     *
     * Get the list of countries (ISO 3166-1 tags) used throughout TMDb.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETConfigurationCountriesTest() throws ApiException {
        String apiKey = null;
        List<Object> response = api.gETConfigurationCountries(apiKey);

        // TODO: test validations
    }
    /**
     * Get Jobs
     *
     * Get a list of the jobs and departments we use on TMDb.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETConfigurationJobsTest() throws ApiException {
        String apiKey = null;
        List<Object> response = api.gETConfigurationJobs(apiKey);

        // TODO: test validations
    }
    /**
     * Get Languages
     *
     * Get the list of languages (ISO 639-1 tags) used throughout TMDb.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETConfigurationLanguagesTest() throws ApiException {
        String apiKey = null;
        List<Object> response = api.gETConfigurationLanguages(apiKey);

        // TODO: test validations
    }
    /**
     * Get Primary Translations
     *
     * Get a list of the _officially_ supported translations on TMDb.  While it&#x27;s technically possible to add a translation in any one of the [languages](#endpoint:tem8QfFFyAfWodrCv) we have added to TMDb (we don&#x27;t restrict content), the ones listed in this method are the ones we also support for localizing the website with which means they are what we refer to as the \&quot;primary\&quot; translations.  These are all specified as [IETF tags](https://en.wikipedia.org/wiki/IETF_language_tag) to identify the languages we use on TMDb. There is one exception which is image languages. They are currently only designated by a ISO-639-1 tag. This is a planned upgrade for the future.  We&#x27;re always open to adding more if you think one should be added. You can ask about getting a new primary translation added by posting on [the forums](https://www.themoviedb.org/talk/category/5047951f760ee3318900009a).  One more thing to mention, these are the translations that map to our website translation project. You can view and contribute to that project [here](https://www.localeapp.com/projects/8267).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETConfigurationPrimaryTranslationsTest() throws ApiException {
        String apiKey = null;
        List<String> response = api.gETConfigurationPrimaryTranslations(apiKey);

        // TODO: test validations
    }
    /**
     * Get Timezones
     *
     * Get the list of timezones used throughout TMDb.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETConfigurationTimezonesTest() throws ApiException {
        String apiKey = null;
        List<Object> response = api.gETConfigurationTimezones(apiKey);

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get a movie or TV credit details by id.  #### Recent Changes  | **Date** | **Change** | | - | - | | July 13, 2018 | Movie credits are now supported. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCreditCreditIdTest() throws ApiException {
        String creditId = null;
        Object response = api.gETCreditCreditId(creditId);

        // TODO: test validations
    }
    /**
     * Movie Discover
     *
     * Discover movies by different types of data like average rating, number of votes, genres and certifications. You can get a valid list of certifications from the [certifications list](#endpoint:faFKjuKG2HnwexAWM) method.  Discover also supports a nice list of sort options. See below for all of the available options.  Please note, when using &#x60;certification&#x60; \\ &#x60;certification.lte&#x60; you must also specify &#x60;certification_country&#x60;. These two parameters work together in order to filter the results. You can only filter results with the countries we have added to our [certifications list](#endpoint:faFKjuKG2HnwexAWM).  If you specify the &#x60;region&#x60; parameter, the regional release date will be used instead of the primary release date. The date returned will be the first date based on your query (ie. if a &#x60;with_release_type&#x60; is specified). It&#x27;s important to note the order of the release types that are used. Specifying \&quot;2|3\&quot; would return the limited theatrical release date as opposed to \&quot;3|2\&quot; which would return the theatrical date.  Also note that a number of filters support being comma (&#x60;,&#x60;) or pipe (&#x60;|&#x60;) separated. Comma&#x27;s are treated like an &#x60;AND&#x60; and query while pipe&#x27;s are an &#x60;OR&#x60;.   Some examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETDiscoverMovieTest() throws ApiException {
        String sortBy = null;
        String certificationCountry = null;
        String certification = null;
        String certificationLte = null;
        String certificationGte = null;
        Boolean includeAdult = null;
        Boolean includeVideo = null;
        String language = null;
        Integer page = null;
        Integer primaryReleaseYear = null;
        LocalDate primaryReleaseDateGte = null;
        LocalDate primaryReleaseDateLte = null;
        LocalDate releaseDateGte = null;
        LocalDate releaseDateLte = null;
        Integer withReleaseType = null;
        Integer year = null;
        Integer voteCountGte = null;
        Integer voteCountLte = null;
        BigDecimal voteAverageGte = null;
        BigDecimal voteAverageLte = null;
        String withCast = null;
        String withCrew = null;
        String withPeople = null;
        String withCompanies = null;
        String withGenres = null;
        String withoutGenres = null;
        String withKeywords = null;
        String withoutKeywords = null;
        Integer withRuntimeGte = null;
        Integer withRuntimeLte = null;
        String withOriginalLanguage = null;
        Object response = api.gETDiscoverMovie(sortBy, certificationCountry, certification, certificationLte, certificationGte, includeAdult, includeVideo, language, page, primaryReleaseYear, primaryReleaseDateGte, primaryReleaseDateLte, releaseDateGte, releaseDateLte, withReleaseType, year, voteCountGte, voteCountLte, voteAverageGte, voteAverageLte, withCast, withCrew, withPeople, withCompanies, withGenres, withoutGenres, withKeywords, withoutKeywords, withRuntimeGte, withRuntimeLte, withOriginalLanguage);

        // TODO: test validations
    }
    /**
     * TV Discover
     *
     * Discover TV shows by different types of data like average rating, number of votes, genres, the network they aired on and air dates.  Discover also supports a nice list of sort options. See below for all of the available options.  Also note that a number of filters support being comma (&#x60;,&#x60;) or pipe (&#x60;|&#x60;) separated. Comma&#x27;s are treated like an &#x60;AND&#x60; and query while pipe&#x27;s are an &#x60;OR&#x60;.   Some examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETDiscoverTvTest() throws ApiException {
        String sortBy = null;
        LocalDate airDateGte = null;
        LocalDate airDateLte = null;
        LocalDate firstAirDateGte = null;
        LocalDate firstAirDateLte = null;
        Integer firstAirDateYear = null;
        String language = null;
        Integer page = null;
        String timezone = null;
        BigDecimal voteAverageGte = null;
        Integer voteCountGte = null;
        String withGenres = null;
        String withNetworks = null;
        String withoutGenres = null;
        Integer withRuntimeGte = null;
        Integer withRuntimeLte = null;
        Boolean includeNullFirstAirDates = null;
        String withOriginalLanguage = null;
        String withoutKeywords = null;
        Boolean screenedTheatrically = null;
        String withCompanies = null;
        String withKeywords = null;
        Object response = api.gETDiscoverTv(sortBy, airDateGte, airDateLte, firstAirDateGte, firstAirDateLte, firstAirDateYear, language, page, timezone, voteAverageGte, voteCountGte, withGenres, withNetworks, withoutGenres, withRuntimeGte, withRuntimeLte, includeNullFirstAirDates, withOriginalLanguage, withoutKeywords, screenedTheatrically, withCompanies, withKeywords);

        // TODO: test validations
    }
    /**
     * Find by ID
     *
     * The find method makes it easy to search for objects in our database by an external id. For example, an IMDB ID.  This method will search all objects (movies, TV shows and people) and return the results in a single response.  The supported external sources for each object are as follows.  #### Media Databases  |              | Movies | TV Shows | TV Seasons | TV Episodes | People | | ------------ | ------ | -------- | ---------- | ----------- | ------ | | IMDb ID      | ✓      | ✓        | ✗          | ✓           | ✓      | | TVDB ID      | ✗      | ✓        | ✓          | ✓           | ✗      | | Freebase MID*| ✗      | ✓        | ✓          | ✓           | ✓      | | Freebase ID* | ✗      | ✓        | ✓          | ✓           | ✓      | | TVRage ID*   | ✗      | ✓        | ✓          | ✓           | ✓      |  #### Social IDs  |              | Movies | TV Shows | TV Seasons | TV Episodes | People | | ------------ | ------ | -------- | ---------- | ----------- | ------ | | Facebook     | ✓      | ✓        | ✗          | ✗           | ✓      | | Instagram    | ✓      | ✓        | ✗          | ✗           | ✓      | | Twitter      | ✓      | ✓        | ✗          | ✗           | ✓      |  *Defunct or no longer available as a service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETFindExternalIdTest() throws ApiException {
        String externalId = null;
        String externalSource = null;
        Object response = api.gETFindExternalId(externalId, externalSource);

        // TODO: test validations
    }
    /**
     * Get Movie List
     *
     * Get the list of official genres for movies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETGenreMovieListTest() throws ApiException {
        String language = null;
        Object response = api.gETGenreMovieList(language);

        // TODO: test validations
    }
    /**
     * Get TV List
     *
     * Get the list of official genres for TV shows.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETGenreTvListTest() throws ApiException {
        Object response = api.gETGenreTvList();

        // TODO: test validations
    }
    /**
     * Get Rated Movies
     *
     * Get the rated movies for a guest session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETGuestSessionGuestSessionIdRatedMoviesTest() throws ApiException {
        String guestSessionId = null;
        Object response = api.gETGuestSessionGuestSessionIdRatedMovies(guestSessionId);

        // TODO: test validations
    }
    /**
     * Get Rated TV Shows
     *
     * Get the rated TV shows for a guest session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETGuestSessionGuestSessionIdRatedTvTest() throws ApiException {
        String guestSessionId = null;
        Object response = api.gETGuestSessionGuestSessionIdRatedTv(guestSessionId);

        // TODO: test validations
    }
    /**
     * Get Rated TV Episodes
     *
     * Get the rated TV episodes for a guest session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETGuestSessionGuestSessionIdRatedTvEpisodesTest() throws ApiException {
        String guestSessionId = null;
        Object response = api.gETGuestSessionGuestSessionIdRatedTvEpisodes(guestSessionId);

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETKeywordKeywordIdTest() throws ApiException {
        Integer keywordId = null;
        Object response = api.gETKeywordKeywordId(keywordId);

        // TODO: test validations
    }
    /**
     * Get Movies
     *
     * Get the movies that belong to a keyword.  We **highly recommend** using [movie discover](#endpoint:p5NyoR7dM842S8G9j) instead of this method as it is much more flexible.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETKeywordKeywordIdMoviesTest() throws ApiException {
        Integer keywordId = null;
        Object response = api.gETKeywordKeywordIdMovies(keywordId);

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get the details of a list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETListListIdTest() throws ApiException {
        String listId = null;
        Object response = api.gETListListId(listId);

        // TODO: test validations
    }
    /**
     * Check Item Status
     *
     * You can use this method to check if a movie has already been added to the list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETListListIdItemStatusTest() throws ApiException {
        String listId = null;
        Integer movieId = null;
        Object response = api.gETListListIdItemStatus(listId, movieId);

        // TODO: test validations
    }
    /**
     * Get Movie Change List
     *
     * Get  a list of all of the movie ids that have been changed in the past 24 hours.  You can query it for up to 14 days worth of changed IDs at a time with the &#x60;start_date&#x60; and &#x60;end_date&#x60; query parameters. 100 items are returned per page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieChangesTest() throws ApiException {
        Object response = api.gETMovieChanges();

        // TODO: test validations
    }
    /**
     * Get Latest
     *
     * Get the most newly created movie. This is a live response and will continuously change.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieLatestTest() throws ApiException {
        Object response = api.gETMovieLatest();

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get the primary information about a movie.  Supports &#x60;append_to_response&#x60;. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdTest() throws ApiException {
        Integer movieId = null;
        Object response = api.gETMovieMovieId(movieId);

        // TODO: test validations
    }
    /**
     * Get Account States
     *
     * Grab the following account states for a session:  - Movie rating - If it belongs to your watchlist - If it belongs to your favourite list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdAccountStatesTest() throws ApiException {
        Integer movieId = null;
        String sessionId = null;
        String guestSessionId = null;
        Object response = api.gETMovieMovieIdAccountStates(movieId, sessionId, guestSessionId);

        // TODO: test validations
    }
    /**
     * Get Alternative Titles
     *
     * Get all of the alternative titles for a movie.  #### Recent Changes  | **Date** | **Change** | | - | - | | March 16, 2018 | Added the &#x60;type&#x60; field. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdAlternativeTitlesTest() throws ApiException {
        Integer movieId = null;
        String country = null;
        Object response = api.gETMovieMovieIdAlternativeTitles(movieId, country);

        // TODO: test validations
    }
    /**
     * Get Changes
     *
     * Get the changes for a movie. By default only the last 24 hours are returned.  You can query up to 14 days in a single query by using the &#x60;start_date&#x60; and &#x60;end_date&#x60; query parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdChangesTest() throws ApiException {
        Integer movieId = null;
        Object response = api.gETMovieMovieIdChanges(movieId);

        // TODO: test validations
    }
    /**
     * Get Credits
     *
     * Get the cast and crew for a movie.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdCreditsTest() throws ApiException {
        Integer movieId = null;
        Object response = api.gETMovieMovieIdCredits(movieId);

        // TODO: test validations
    }
    /**
     * Get External IDs
     *
     * Get the external ids for a movie. We currently support the following external sources.  | **Media Databases** | **Social IDs** | | ------------------- | -------------- | | IMDb ID             | Facebook       | |                     | Instagram      | |                     | Twitter        |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdExternalIdsTest() throws ApiException {
        Integer movieId = null;
        String apiKey = null;
        Object response = api.gETMovieMovieIdExternalIds(movieId, apiKey);

        // TODO: test validations
    }
    /**
     * Get Images
     *
     * Get the images that belong to a movie.  Querying images with a &#x60;language&#x60; parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the &#x60;include_image_language&#x60; parameter. This should be a comma seperated value like so: &#x60;include_image_language&#x3D;en,null&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdImagesTest() throws ApiException {
        Integer movieId = null;
        String includeImageLanguage = null;
        Object response = api.gETMovieMovieIdImages(movieId, includeImageLanguage);

        // TODO: test validations
    }
    /**
     * Get Keywords
     *
     * Get the keywords that have been added to a movie.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdKeywordsTest() throws ApiException {
        Integer movieId = null;
        String apiKey = null;
        Object response = api.gETMovieMovieIdKeywords(movieId, apiKey);

        // TODO: test validations
    }
    /**
     * Get Lists
     *
     * Get a list of lists that this movie belongs to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdListsTest() throws ApiException {
        Integer movieId = null;
        String apiKey = null;
        Object response = api.gETMovieMovieIdLists(movieId, apiKey);

        // TODO: test validations
    }
    /**
     * Get Recommendations
     *
     * Get a list of recommended movies for a movie.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdRecommendationsTest() throws ApiException {
        Integer movieId = null;
        String apiKey = null;
        Object response = api.gETMovieMovieIdRecommendations(movieId, apiKey);

        // TODO: test validations
    }
    /**
     * Get Release Dates
     *
     * Get the release date along with the certification for a movie.  Release dates support different types:  1. Premiere 2. Theatrical (limited) 3. Theatrical 4. Digital 5. Physical 6. TV
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdReleaseDatesTest() throws ApiException {
        Integer movieId = null;
        String apiKey = null;
        Object response = api.gETMovieMovieIdReleaseDates(movieId, apiKey);

        // TODO: test validations
    }
    /**
     * Get Reviews
     *
     * Get the user reviews for a movie.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdReviewsTest() throws ApiException {
        Integer movieId = null;
        String apiKey = null;
        Object response = api.gETMovieMovieIdReviews(movieId, apiKey);

        // TODO: test validations
    }
    /**
     * Get Similar Movies
     *
     * Get a list of similar movies. This is **not** the same as the \&quot;Recommendation\&quot; system you see on the website.  These items are assembled by looking at keywords and genres.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdSimilarTest() throws ApiException {
        Integer movieId = null;
        String apiKey = null;
        Object response = api.gETMovieMovieIdSimilar(movieId, apiKey);

        // TODO: test validations
    }
    /**
     * Get Translations
     *
     * Get a list of translations that have been created for a movie.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdTranslationsTest() throws ApiException {
        Integer movieId = null;
        String apiKey = null;
        Object response = api.gETMovieMovieIdTranslations(movieId, apiKey);

        // TODO: test validations
    }
    /**
     * Get Videos
     *
     * Get the videos that have been added to a movie.  #### Recent Changes  | **Date** | **Change** | | - | - | | March 23, 2019 | Vimeo was added as a video source. | | March 20, 2019 | \&quot;Behind the Scenes\&quot; and \&quot;Bloopers\&quot; were added as valid video types. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieMovieIdVideosTest() throws ApiException {
        Integer movieId = null;
        String apiKey = null;
        Object response = api.gETMovieMovieIdVideos(movieId, apiKey);

        // TODO: test validations
    }
    /**
     * Get Now Playing
     *
     * Get a list of movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.  You can optionally specify a &#x60;region&#x60; prameter which will narrow the search to only look for theatrical release dates within the specified country.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieNowPlayingTest() throws ApiException {
        Object response = api.gETMovieNowPlaying();

        // TODO: test validations
    }
    /**
     * Get Popular
     *
     * Get a list of the current popular movies on TMDb. This list updates daily.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMoviePopularTest() throws ApiException {
        Object response = api.gETMoviePopular();

        // TODO: test validations
    }
    /**
     * Get Top Rated
     *
     * Get the top rated movies on TMDb.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieTopRatedTest() throws ApiException {
        Object response = api.gETMovieTopRated();

        // TODO: test validations
    }
    /**
     * Get Upcoming
     *
     * Get a list of upcoming movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.  You can optionally specify a &#x60;region&#x60; prameter which will narrow the search to only look for theatrical release dates within the specified country.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETMovieUpcomingTest() throws ApiException {
        Object response = api.gETMovieUpcoming();

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get the details of a network.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETNetworkNetworkIdTest() throws ApiException {
        Integer networkId = null;
        Object response = api.gETNetworkNetworkId(networkId);

        // TODO: test validations
    }
    /**
     * Get Alternative Names
     *
     * Get the alternative names of a network.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETNetworkNetworkIdAlternativeNamesTest() throws ApiException {
        Integer networkId = null;
        Object response = api.gETNetworkNetworkIdAlternativeNames(networkId);

        // TODO: test validations
    }
    /**
     * Get Images
     *
     * Get the TV network logos by id.  There are two image formats that are supported for networks, PNG&#x27;s and SVG&#x27;s. You can see which type the original file is by looking at the &#x60;file_type&#x60; field. We prefer SVG&#x27;s as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.  For more information about how SVG&#x27;s and PNG&#x27;s can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETNetworkNetworkIdImagesTest() throws ApiException {
        Integer networkId = null;
        Object response = api.gETNetworkNetworkIdImages(networkId);

        // TODO: test validations
    }
    /**
     * Get Person Change List
     *
     * Get a list of all of the person ids that have been changed in the past 24 hours.  You can query it for up to 14 days worth of changed IDs at a time with the &#x60;start_date&#x60; and &#x60;end_date&#x60; query parameters. 100 items are returned per page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonChangesTest() throws ApiException {
        Object response = api.gETPersonChanges();

        // TODO: test validations
    }
    /**
     * Get Latest
     *
     * Get the most newly created person. This is a live response and will continuously change.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonLatestTest() throws ApiException {
        Object response = api.gETPersonLatest();

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get the primary person details by id.  Supports &#x60;append_to_response&#x60;. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).  #### Recent Changes  | **Date** | **Change** | | - | - | | July 17, 2018 | Added the &#x60;known_for_department&#x60; field. | | April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. | | November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonPersonIdTest() throws ApiException {
        Integer personId = null;
        Object response = api.gETPersonPersonId(personId);

        // TODO: test validations
    }
    /**
     * Get Changes
     *
     * Get the changes for a person. By default only the last 24 hours are returned.  You can query up to 14 days in a single query by using the &#x60;start_date&#x60; and &#x60;end_date&#x60; query parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonPersonIdChangesTest() throws ApiException {
        Integer personId = null;
        Object response = api.gETPersonPersonIdChanges(personId);

        // TODO: test validations
    }
    /**
     * Get Combined Credits
     *
     * Get the movie and TV credits together in a single response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonPersonIdCombinedCreditsTest() throws ApiException {
        Integer personId = null;
        Object response = api.gETPersonPersonIdCombinedCredits(personId);

        // TODO: test validations
    }
    /**
     * Get External IDs
     *
     * Get the external ids for a person. We currently support the following external sources.  | **External Sources** | | ------------     | | IMDB ID          | | Facebook         | | Freebase MID     | | Freebase ID      | | Instagram        | | TVRage ID        | | Twitter          |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonPersonIdExternalIdsTest() throws ApiException {
        Integer personId = null;
        Object response = api.gETPersonPersonIdExternalIds(personId);

        // TODO: test validations
    }
    /**
     * Get Images
     *
     * Get the images for a person.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonPersonIdImagesTest() throws ApiException {
        Integer personId = null;
        Object response = api.gETPersonPersonIdImages(personId);

        // TODO: test validations
    }
    /**
     * Get Movie Credits
     *
     * Get the movie credits for a person.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonPersonIdMovieCreditsTest() throws ApiException {
        Integer personId = null;
        Object response = api.gETPersonPersonIdMovieCredits(personId);

        // TODO: test validations
    }
    /**
     * Get Tagged Images
     *
     * Get the images that this person has been tagged in.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonPersonIdTaggedImagesTest() throws ApiException {
        Integer personId = null;
        Object response = api.gETPersonPersonIdTaggedImages(personId);

        // TODO: test validations
    }
    /**
     * Get Translations
     *
     * Get a list of translations that have been created for a person.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonPersonIdTranslationsTest() throws ApiException {
        Integer personId = null;
        Object response = api.gETPersonPersonIdTranslations(personId);

        // TODO: test validations
    }
    /**
     * Get TV Credits
     *
     * Get the TV show credits for a person.  You can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonPersonIdTvCreditsTest() throws ApiException {
        Integer personId = null;
        Object response = api.gETPersonPersonIdTvCredits(personId);

        // TODO: test validations
    }
    /**
     * Get Popular
     *
     * Get the list of popular people on TMDb. This list updates daily.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPersonPopularTest() throws ApiException {
        Object response = api.gETPersonPopular();

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETReviewReviewIdTest() throws ApiException {
        String reviewId = null;
        Object response = api.gETReviewReviewId(reviewId);

        // TODO: test validations
    }
    /**
     * Search Collections
     *
     * Search for collections.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETSearchCollectionTest() throws ApiException {
        Object response = api.gETSearchCollection();

        // TODO: test validations
    }
    /**
     * Search Companies
     *
     * Search for companies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETSearchCompanyTest() throws ApiException {
        Object response = api.gETSearchCompany();

        // TODO: test validations
    }
    /**
     * Search Keywords
     *
     * Search for keywords.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETSearchKeywordTest() throws ApiException {
        Object response = api.gETSearchKeyword();

        // TODO: test validations
    }
    /**
     * Search Movies
     *
     * Search for movies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETSearchMovieTest() throws ApiException {
        Integer year = null;
        Integer primaryReleaseYear = null;
        Object response = api.gETSearchMovie(year, primaryReleaseYear);

        // TODO: test validations
    }
    /**
     * Multi Search
     *
     * Search multiple models in a single request. Multi search currently supports searching for movies, tv shows and people in a single request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETSearchMultiTest() throws ApiException {
        Object response = api.gETSearchMulti();

        // TODO: test validations
    }
    /**
     * Search People
     *
     * Search for people.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETSearchPersonTest() throws ApiException {
        Object response = api.gETSearchPerson();

        // TODO: test validations
    }
    /**
     * Search TV Shows
     *
     * Search for a TV show.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETSearchTvTest() throws ApiException {
        Integer firstAirDateYear = null;
        Object response = api.gETSearchTv(firstAirDateYear);

        // TODO: test validations
    }
    /**
     * Get Trending
     *
     * Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.  #### Valid Media Types  | **Media Type** | **Description** | | - | - | | all | Include all movies, TV shows and people in the results as a global trending list. | | movie | Show the trending movies in the results. | | tv | Show the trending TV shows in the results. | | person | Show the trending people in the results. |  #### Valid Time Windows  | **Time Window** | **Description** | | - | - | | day | View the trending list for the day. | | week | View the trending list for the week. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTrendingMediaTypeTimeWindowTest() throws ApiException {
        String mediaType = null;
        String timeWindow = null;
        Object response = api.gETTrendingMediaTypeTimeWindow(mediaType, timeWindow);

        // TODO: test validations
    }
    /**
     * Get TV Airing Today
     *
     * Get a list of TV shows that are airing today. This query is purely day based as we do not currently support airing times.  You can specify a [timezone](endpoint:KQ4CDdEoWKJYLkrhS) to offset the day calculation. Without a specified timezone, this query defaults to EST (Eastern Time UTC-05:00).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvAiringTodayTest() throws ApiException {
        Object response = api.gETTvAiringToday();

        // TODO: test validations
    }
    /**
     * Get TV Change List
     *
     * Get a list of all of the TV show ids that have been changed in the past 24 hours.  You can query it for up to 14 days worth of changed IDs at a time with the &#x60;start_date&#x60; and &#x60;end_date&#x60; query parameters. 100 items are returned per page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvChangesTest() throws ApiException {
        Object response = api.gETTvChanges();

        // TODO: test validations
    }
    /**
     * Get Changes
     *
     * Get the changes for a TV episode. By default only the last 24 hours are returned.  You can query up to 14 days in a single query by using the &#x60;start_date&#x60; and &#x60;end_date&#x60; query parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvEpisodeEpisodeIdChangesTest() throws ApiException {
        Integer episodeId = null;
        Object response = api.gETTvEpisodeEpisodeIdChanges(episodeId);

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get the details of a TV episode group. Groups support 7 different types which are enumerated as the following:  1. Original air date 2. Absolute 3. DVD 4. Digital 5. Story arc 6. Production 7. TV
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvEpisodeGroupIdTest() throws ApiException {
        String id = null;
        Object response = api.gETTvEpisodeGroupId(id);

        // TODO: test validations
    }
    /**
     * Get Latest
     *
     * Get the most newly created TV show. This is a live response and will continuously change.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvLatestTest() throws ApiException {
        Object response = api.gETTvLatest();

        // TODO: test validations
    }
    /**
     * Get TV On The Air
     *
     * Get a list of shows that are currently on the air.  This query looks for any TV show that has an episode with an air date in the next 7 days.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvOnTheAirTest() throws ApiException {
        Object response = api.gETTvOnTheAir();

        // TODO: test validations
    }
    /**
     * Get Popular
     *
     * Get a list of the current popular TV shows on TMDb. This list updates daily.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvPopularTest() throws ApiException {
        Object response = api.gETTvPopular();

        // TODO: test validations
    }
    /**
     * Get  Changes
     *
     * Get the changes for a TV season. By default only the last 24 hours are returned.  You can query up to 14 days in a single query by using the &#x60;start_date&#x60; and &#x60;end_date&#x60; query parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvSeasonSeasonIdChangesTest() throws ApiException {
        Integer seasonId = null;
        Object response = api.gETTvSeasonSeasonIdChanges(seasonId);

        // TODO: test validations
    }
    /**
     * Get Top Rated
     *
     * Get a list of the top rated TV shows on TMDb.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTopRatedTest() throws ApiException {
        Object response = api.gETTvTopRated();

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get the primary TV show details by id.  Supports &#x60;append_to_response&#x60;. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).  #### Recent Changes  | **Date** | **Change** | | - | - | | July 17, 2018 | We now return &#x60;last_episode_to_air&#x60; and &#x60;next_episode_to_air&#x60; fields. | | March 12, 2018 | Networks return proper logos and we introduced SVG support. | | March 8, 2018 | The &#x60;seasons&#x60; field now returns the translated names and overviews. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvId(tvId);

        // TODO: test validations
    }
    /**
     * Get Account States
     *
     * Grab the following account states for a session:  - TV show rating - If it belongs to your watchlist - If it belongs to your favourite list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdAccountStatesTest() throws ApiException {
        Integer tvId = null;
        String guestSessionId = null;
        String sessionId = null;
        Object response = api.gETTvTvIdAccountStates(tvId, guestSessionId, sessionId);

        // TODO: test validations
    }
    /**
     * Get Alternative Titles
     *
     * Returns all of the alternative titles for a TV show.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdAlternativeTitlesTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdAlternativeTitles(tvId);

        // TODO: test validations
    }
    /**
     * Get Changes
     *
     * Get the changes for a TV show. By default only the last 24 hours are returned.  You can query up to 14 days in a single query by using the &#x60;start_date&#x60; and &#x60;end_date&#x60; query parameters.  TV show changes are different than movie changes in that there are some edits on seasons and episodes that will create a change entry at the show level. These can be found under the season and episode keys. These keys will contain a &#x60;series_id&#x60; and &#x60;episode_id&#x60;. You can use the [season changes](#endpoint:ZqhtyQbJ4YXz8RSya) and [episode changes](#endpoint:FpqrhBzgf2RJv4bHC) methods to look these up individually.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdChangesTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdChanges(tvId);

        // TODO: test validations
    }
    /**
     * Get Content Ratings
     *
     * Get the list of content ratings (certifications) that have been added to a TV show.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdContentRatingsTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdContentRatings(tvId);

        // TODO: test validations
    }
    /**
     * Get Credits
     *
     * Get the credits (cast and crew) that have been added to a TV show.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdCreditsTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdCredits(tvId);

        // TODO: test validations
    }
    /**
     * Get Episode Groups
     *
     * Get all of the episode groups that have been created for a TV show. With a group ID you can call the [get TV episode group details](#endpoint:yCouThc88qs7DGHY5) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdEpisodeGroupsTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdEpisodeGroups(tvId);

        // TODO: test validations
    }
    /**
     * Get External IDs
     *
     * Get the external ids for a TV show. We currently support the following external sources.  | **Media Databases** | **Social IDs** | | ------------------- | -------------- | | IMDb ID             | Facebook       | | TVDB ID             | Instagram      | | Freebase MID*       | Twitter        | | Freebase ID*        |                | | TVRage ID*          |                |  *Defunct or no longer available as a service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdExternalIdsTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdExternalIds(tvId);

        // TODO: test validations
    }
    /**
     * Get Images
     *
     * Get the images that belong to a TV show.  Querying images with a &#x60;language&#x60; parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the &#x60;include_image_language&#x60; parameter. This should be a comma seperated value like so: &#x60;include_image_language&#x3D;en,null&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdImagesTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdImages(tvId);

        // TODO: test validations
    }
    /**
     * Get Keywords
     *
     * Get the keywords that have been added to a TV show.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdKeywordsTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdKeywords(tvId);

        // TODO: test validations
    }
    /**
     * Get Recommendations
     *
     * Get the list of TV show recommendations for this item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdRecommendationsTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdRecommendations(tvId);

        // TODO: test validations
    }
    /**
     * Get Reviews
     *
     * Get the reviews for a TV show.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdReviewsTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdReviews(tvId);

        // TODO: test validations
    }
    /**
     * Get Screened Theatrically
     *
     * Get a list of seasons or episodes that have been screened in a film festival or theatre.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdScreenedTheatricallyTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdScreenedTheatrically(tvId);

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get the TV season details by id.  Supports &#x60;append_to_response&#x60;. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumber(tvId, seasonNumber);

        // TODO: test validations
    }
    /**
     * Get Account States
     *
     * Returns all of the user ratings for the season&#x27;s episodes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberAccountStatesTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        String guestSessionId = null;
        String sessionId = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberAccountStates(tvId, seasonNumber, guestSessionId, sessionId);

        // TODO: test validations
    }
    /**
     * Get Credits
     *
     * Get the credits for TV season.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberCreditsTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberCredits(tvId, seasonNumber);

        // TODO: test validations
    }
    /**
     * Get Details
     *
     * Get the TV episode details by id.  Supports &#x60;append_to_response&#x60;. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).  #### Recent Changes  | **Date** | **Change** | | - | - | | June 1, 2018 | Added the [translations](#endpoint:5SFwZar3LkP99QMp7) method. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Integer episodeNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber(tvId, seasonNumber, episodeNumber);

        // TODO: test validations
    }
    /**
     * Get Account States
     *
     * Get your rating for a episode.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Integer episodeNumber = null;
        String guestSessionId = null;
        String sessionId = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates(tvId, seasonNumber, episodeNumber, guestSessionId, sessionId);

        // TODO: test validations
    }
    /**
     * Get Credits
     *
     * Get the credits (cast, crew and guest stars) for a TV episode.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCreditsTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Integer episodeNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits(tvId, seasonNumber, episodeNumber);

        // TODO: test validations
    }
    /**
     * Get External IDs
     *
     * Get the external ids for a TV episode. We currently support the following external sources.  | **External Sources** | | -------------------- | | IMDb ID              | | TVDB ID              | | Freebase MID*        | | Freebase ID*         | | TVRage ID*           |  *Defunct or no longer available as a service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIdsTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Integer episodeNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds(tvId, seasonNumber, episodeNumber);

        // TODO: test validations
    }
    /**
     * Get Images
     *
     * Get the images that belong to a TV episode.  Querying images with a &#x60;language&#x60; parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the &#x60;include_image_language&#x60; parameter. This should be a comma seperated value like so: &#x60;include_image_language&#x3D;en,null&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImagesTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Integer episodeNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages(tvId, seasonNumber, episodeNumber);

        // TODO: test validations
    }
    /**
     * Get Translations
     *
     * Get the translation data for an episode.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslationsTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Integer episodeNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations(tvId, seasonNumber, episodeNumber);

        // TODO: test validations
    }
    /**
     * Get  Videos
     *
     * Get the videos that have been added to a TV episode.  #### Recent Changes  | **Date** | **Change** | | - | - | | March 23, 2019 | Vimeo was added as a video source. | | March 20, 2019 | \&quot;Behind the Scenes\&quot;, \&quot;Bloopers\&quot; and \&quot;Recap\&quot; were added as valid video types. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideosTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Integer episodeNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos(tvId, seasonNumber, episodeNumber);

        // TODO: test validations
    }
    /**
     * Get External IDs
     *
     * Get the external ids for a TV season. We currently support the following external sources.  | **Media Databases** | | ------------------- | | TVDB ID             | | Freebase MID*       | | Freebase ID*        | | TVRage ID*          |  *Defunct or no longer available as a service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberExternalIdsTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberExternalIds(tvId, seasonNumber);

        // TODO: test validations
    }
    /**
     * Get Images
     *
     * Get the images that belong to a TV season.  Querying images with a &#x60;language&#x60; parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the &#x60;include_image_language&#x60; parameter. This should be a comma seperated value like so: &#x60;include_image_language&#x3D;en,null&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberImagesTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberImages(tvId, seasonNumber);

        // TODO: test validations
    }
    /**
     * Get Videos
     *
     * Get the videos that have been added to a TV season.  #### Recent Changes  | **Date** | **Change** | | - | - | | March 23, 2019 | Vimeo was added as a video source. | | March 20, 2019 | \&quot;Behind the Scenes\&quot; and \&quot;Bloopers\&quot; and \&quot;Recap\&quot; were added as valid video types. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSeasonSeasonNumberVideosTest() throws ApiException {
        Integer tvId = null;
        Integer seasonNumber = null;
        Object response = api.gETTvTvIdSeasonSeasonNumberVideos(tvId, seasonNumber);

        // TODO: test validations
    }
    /**
     * Get Similar TV Shows
     *
     * Get a list of similar TV shows. These items are assembled by looking at keywords and genres.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdSimilarTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdSimilar(tvId);

        // TODO: test validations
    }
    /**
     * Get Translations
     *
     * Get a list of the translations that exist for a TV show.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdTranslationsTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdTranslations(tvId);

        // TODO: test validations
    }
    /**
     * Get Videos
     *
     * Get the videos that have been added to a TV show.  #### Recent Changes  | **Date** | **Change** | | - | - | | March 23, 2019 | Vimeo was added as a video source. | | March 20, 2019 | \&quot;Behind the Scenes\&quot; and \&quot;Bloopers\&quot; were added as valid video types. |
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETTvTvIdVideosTest() throws ApiException {
        Integer tvId = null;
        Object response = api.gETTvTvIdVideos(tvId);

        // TODO: test validations
    }
    /**
     * Mark as Favorite
     *
     * This method allows you to mark a movie or TV show as a favorite item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTAccountAccountIdFavoriteTest() throws ApiException {
        String contentType = null;
        String sessionId = null;
        Integer accountId = null;
        Object body = null;
        Object response = api.pOSTAccountAccountIdFavorite(contentType, sessionId, accountId, body);

        // TODO: test validations
    }
    /**
     * Add to Watchlist
     *
     * Add a movie or TV show to your watchlist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTAccountAccountIdWatchlistTest() throws ApiException {
        String contentType = null;
        String sessionId = null;
        Integer accountId = null;
        Object body = null;
        Object response = api.pOSTAccountAccountIdWatchlist(contentType, sessionId, accountId, body);

        // TODO: test validations
    }
    /**
     * Create Session (from v4 access token)
     *
     * Use this method to create a v3 session ID if you already have a valid v4 access token. The v4 token needs to be authenticated by the user. Your standard \&quot;read token\&quot; will not validate to create a session ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTAuthenticationSessionConvert4Test() throws ApiException {
        Object body = null;
        Object response = api.pOSTAuthenticationSessionConvert4(body);

        // TODO: test validations
    }
    /**
     * Create Session
     *
     * You can use this method to create a fully valid session ID once a user has validated the request token. More information about how this works can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTAuthenticationSessionNewTest() throws ApiException {
        Object body = null;
        Object response = api.pOSTAuthenticationSessionNew(body);

        // TODO: test validations
    }
    /**
     * Create Session With Login
     *
     * This method allows an application to validate a request token by entering a username and password.  Not all applications have access to a web view so this can be used as a substitute.  Please note, the preferred method of validating a request token is to have a user authenticate the request via the TMDb website. You can read about that method [here](#docTextSection:NSZtgz7zptsiLYxXZ).  If you decide to use this method please **use HTTPS**.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTAuthenticationTokenValidateWithLoginTest() throws ApiException {
        Object body = null;
        Object response = api.pOSTAuthenticationTokenValidateWithLogin(body);

        // TODO: test validations
    }
    /**
     * Create List
     *
     * Create a list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTListTest() throws ApiException {
        String contentType = null;
        String sessionId = null;
        Object body = null;
        Object response = api.pOSTList(contentType, sessionId, body);

        // TODO: test validations
    }
    /**
     * Add Movie
     *
     * Add a movie to a list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTListListIdAddItemTest() throws ApiException {
        String contentType = null;
        String sessionId = null;
        String listId = null;
        Object body = null;
        Object response = api.pOSTListListIdAddItem(contentType, sessionId, listId, body);

        // TODO: test validations
    }
    /**
     * Clear List
     *
     * Clear all of the items from a list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTListListIdClearTest() throws ApiException {
        String listId = null;
        Boolean confirm = null;
        String sessionId = null;
        Object response = api.pOSTListListIdClear(listId, confirm, sessionId);

        // TODO: test validations
    }
    /**
     * Remove Movie
     *
     * Remove a movie from a list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTListListIdRemoveItemTest() throws ApiException {
        String contentType = null;
        String sessionId = null;
        String listId = null;
        Object body = null;
        Object response = api.pOSTListListIdRemoveItem(contentType, sessionId, listId, body);

        // TODO: test validations
    }
    /**
     * Rate Movie
     *
     * Rate a movie.  A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTMovieMovieIdRatingTest() throws ApiException {
        String contentType = null;
        Integer movieId = null;
        Object body = null;
        String guestSessionId = null;
        String sessionId = null;
        Object response = api.pOSTMovieMovieIdRating(contentType, movieId, body, guestSessionId, sessionId);

        // TODO: test validations
    }
    /**
     * Rate TV Show
     *
     * Rate a TV show.  A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTTvTvIdRatingTest() throws ApiException {
        String contentType = null;
        Integer tvId = null;
        Object body = null;
        String guestSessionId = null;
        String sessionId = null;
        Object response = api.pOSTTvTvIdRating(contentType, tvId, body, guestSessionId, sessionId);

        // TODO: test validations
    }
    /**
     * Rate TV Episode
     *
     * Rate a TV episode.  A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pOSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingTest() throws ApiException {
        String contentType = null;
        Integer tvId = null;
        Integer seasonNumber = null;
        Integer episodeNumber = null;
        Object body = null;
        String guestSessionId = null;
        String sessionId = null;
        Object response = api.pOSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating(contentType, tvId, seasonNumber, episodeNumber, body, guestSessionId, sessionId);

        // TODO: test validations
    }
}
